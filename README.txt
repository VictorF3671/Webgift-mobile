NOVO ADMIN
EMAIL: admin@gmail.com
SENHA: admin123

figma: https://www.figma.com/design/WNJZn9OegabITyrWaEXm4V/WebsiteE?node-id=124-30&p=f&t=EvVvXZrPGXlIgiUb-0

<tipo>[escopo opcional]: <mensagem breve>

[descri√ß√£o mais longa opcional]

[refer√™ncia opcional a issue ou tarefa]


Tipo	Para qu√™?

feat = Nova funcionalidade
fix = Corre√ß√£o de bug
docs = Mudan√ßa apenas em documenta√ß√£o
style = Formata√ß√£o, identa√ß√£o, espa√ßos, etc (sem alterar l√≥gica)
refactor = Refatora√ß√£o de c√≥digo (sem mudar comportamento)
test = Adi√ß√£o ou altera√ß√£o de testes
chore = Tarefas que n√£o afetam o c√≥digo de produ√ß√£o (ex: configs, builds)


üßæ Objetivo do sistema
Voc√™ est√° construindo um sistema de venda de gift cards, onde:

Um usu√°rio (cliente) pode realizar pedidos (GiftCardOrder) com um ou mais gift cards (valores e empresas distintas).

Esses pedidos ficam inicialmente com is_paid = False, aguardando confirma√ß√£o do pagamento.

Cada item do pedido √© representado por GiftCardOrderItem, vinculado a um GiftCardValue.

üì¶ Modelos principais envolvidos
GiftCard ‚Äì representa a empresa (Netflix, Amazon, etc).

GiftCardValue ‚Äì valores dispon√≠veis (ex: R$ 50, R$ 100).

GiftCardOrder ‚Äì pedido feito pelo usu√°rio.

GiftCardOrderItem ‚Äì itens comprados no pedido (quantidade e valor).

GiftCardSerial ‚Äì ser√° gerado ap√≥s o pagamento, com o c√≥digo do cart√£o.

SaleHistory ‚Äì ser√° gerado ap√≥s o pagamento, indicando o m√©todo e banco.

‚úÖ Endpoints j√° funcionando
1. Criar uma ordem (GiftCardOrder)
Endpoint:

bash
Copiar
Editar
POST /api/giftcard-orders/
Requisi√ß√£o:

json
Copiar
Editar
{
  "user_id": 1,
  "items": [
    {
      "gift_card_id": 1,
      "value_id": 2,
      "quantity": 3
    },
    {
      "gift_card_id": 2,
      "value_id": 5,
      "quantity": 1
    }
  ]
}
Comportamento:

Cria a GiftCardOrder com is_paid = False.

Cria os GiftCardOrderItem relacionados a essa ordem.

Resposta esperada:

json
Copiar
Editar
{
  "id": 10,
  "user": 1,
  "is_paid": false,
  "items": [
    {
      "gift_card": 1,
      "gift_card_value": 2,
      "quantity": 3
    },
    {
      "gift_card": 2,
      "gift_card_value": 5,
      "quantity": 1
    }
  ],
  "created_at": "2025-05-21T02:18:00Z"
}
2. Listar todas as ordens
Endpoint:

bash
Copiar
Editar
GET /api/giftcard-orders/
Retorna todas as ordens, paginadas, incluindo is_paid, user, e os items.

3. Recuperar uma ordem espec√≠fica
Endpoint:

bash
Copiar
Editar
GET /api/giftcard-orders/{id}/
Exemplo:

swift
Copiar
Editar
GET /api/giftcard-orders/10/
Retorna os detalhes da ordem espec√≠fica.

4. Atualizar ou deletar (se permitido)
Voc√™ tamb√©m tem suporte padr√£o (via ModelViewSet) para:

PUT/PATCH /api/giftcard-orders/{id}/

DELETE /api/giftcard-orders/{id}/

Mas no contexto de pedidos pagos, voc√™ provavelmente vai restringir essas opera√ß√µes mais tarde.

üõë O que ainda n√£o est√° implementado
/confirmar-pagamento/ ‚Üí ainda vamos criar o endpoint que:

Atualiza is_paid = True

Cria os GiftCardSerials

Cria SaleHistory

üë®‚Äçüíª Como testar os endpoints hoje
V√° at√© o Swagger ou Insomnia/Postman.

Crie uma ordem com POST /api/giftcard-orders/.

Depois veja ela com GET /api/giftcard-orders/{id}/.

Confirme que is_paid = false.